(*!m2pim*) (* Copyright (c) 2016 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE AST;

(* AST for Modula-2 R10 Core Compiler *)

FROM AstQueue IMPORT AstQueue;
FROM LexQueue IMPORT LexQueue;
FROM AstNodeType IMPORT AstNodeType;

TYPE AST; (* OPAQUE *)


(* Operations *)

PROCEDURE NewUnaryNode
  ( VAR ast : AST; nodeType : AstNodeType; subnode : AST );
(* Allocates a new branch node of the given node type, stores the given
   subnode in node and passes back node, or NIL on failure. *)

PROCEDURE NewBinaryNode
  ( VAR ast : AST; nodeType : AstNodeType; subnode1, subnode2 : AST );
(* Allocates a new branch node of the given node type, stores the given
   subnodes in node and passes back node, or NIL on failure. *)

PROCEDURE New3aryNode
  ( VAR ast : AST;
    nodeType : AstNodeType; subnode1, subnode2, subnode3 : AST );
(* Allocates a new branch node of the given node type, stores the given
   subnodes in node and passes back node, or NIL on failure. *)

PROCEDURE New4aryNode
  ( VAR ast : AST;
    nodeType : AstNodeType; subnode1, subnode2, subnode3, subnode4 : AST );
(* Allocates a new branch node of the given node type, stores the given
   subnodes in node and passes back node, or NIL on failure. *)

PROCEDURE New5aryNode
  ( VAR ast : AST;
    nodeType : AstNodeType;
    subnode1, subnode2, subnode3, subnode4, subnode5 : AST );
(* Allocates a new branch node of the given node type, stores the given
   subnodes in node and passes back node, or NIL on failure. *)

PROCEDURE NewListNode
  ( VAR ast : AST; nodeType : AstNodeType; subnodes : AstQueue );
(* Allocates a new branch node of the given node type, stores the subnodes of
 * the given node queue in the node and passes back node, or NIL on failure. *)

PROCEDURE NewTerminalNode
  ( VAR ast : AST; nodeType : AstNodeType; value : Lexeme );
(* Allocates a new terminal node of the given node type, stores the given
   value in the node and passes back node, or NIL on failure. *)

PROCEDURE NewTerminalListNode
  ( VAR ast : AST; nodeType : AstNodeType; values : LexQueue );
(* Allocates a new terminal node of the given node type, stores the values of
   the given value queue in the node and passes node, or NIL on failure. *)

PROCEDURE nodeType ( node : AST ) : AstNodeType;
(* Returns the node type of node, or AST.Invalid if node is NIL. *)

PROCEDURE subnodeCount ( node : AST ) : CARDINAL;
(* Returns the number of subnodes or values of node. *)

PROCEDURE subnodeForIndex ( node : AST; index : CARDINAL ) : AST;
(* Returns the subnode of node with the given index or NIL if no subnode of
   the given index is stored in node. *)

PROCEDURE valueForIndex ( node : AST; index : CARDINAL ) : Lexeme;
(* Returns the value stored at the given index in a terminal node,
 * or NIL if the node does not store any value at the given index. *)

PROCEDURE value ( node : AST ) : Lexeme;
(* Calls function valueForIndex with an index of zero. *)

PROCEDURE replaceSubnode
  ( node : AST; atIndex : CARDINAL; withSubnode : AST ) : AST;
(* Replaces a subnode and returns the replaced node, or NIL on failure. *)

PROCEDURE replaceValue
  ( node : AST; atIndex : CARDINAL; withValue : Lexeme ) : Lexeme;
(* Replaces a subnode and returns the replaced value, or NIL on failure. *)

PROCEDURE Release ( VAR ast : AST );
(* Releases ast and passes back NIL if successful. *)


END AST.