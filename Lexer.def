(*!m2pim*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE Lexer;

(* Lexer for Modula-2 R10 Core Compiler *)


FROM Symbol IMPORT SymbolT;


(* Lexer Type *)

TYPE Lexer; (* OPAQUE *)

TYPE LexerT = Lexer; (* for unqualified use *)


(* Lexer Status *)

TYPE Status =
  ( Success,
    AlreadyInitialised,
    UnableToAllocate,
    IllegalSymbolFound,
    UnescapedBackslash,
    IllegalCharInCharOrString,
    EndOfLineInCharOrString,
    LexemeCapacityExceded,
    CommentNestingLimitExceded,
    PrematureEndOfFile );


(* Operations *)

PROCEDURE New ( VAR lexer : Lexer; filename : Filename; VAR s : Status );
(* Create newly allocated and initialised lexer instance associated with
   source file filename.  Passes back the status of the operation in s. *)

PROCEDURE GetSym ( lexer : Lexer; VAR current, next : SymbolT );
(* Passes back the current lookahead symbol in current and consumes it.
   Passes back the new lookahead symbol in next without consuming it. *)

PROCEDURE consumeSym ( lexer : Lexer ) : SymbolT;
(* Returns the current lookahead symbol and consumes it. *)

PROCEDURE lookaheadSym ( lexer : Lexer ) : SymbolT;
(* Returns the current lookahead symbol without consuming it. *)

PROCEDURE warnCount ( lexer : Lexer ) : CARDINAL;
 (* Returns the lexer's accumulated warning count. *)

PROCEDURE errorCount ( lexer : Lexer ) : CARDINAL;
 (* Returns the lexer's accumulated error count. *)

PROCEDURE status ( lexer : Lexer ) : Status;
(* Returns the status of the last operation. *)

PROCEDURE Release ( VAR lexer : Lexer );
 (* Release lexer instance. Passes back NIL in lexer if successful. *)

END Lexer.
