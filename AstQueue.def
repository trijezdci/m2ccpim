(*!m2pim*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE AstQueue;

(* AST Node Queue for Modula-2 R10 Core Compiler *)

FROM AST IMPORT AST;


TYPE AstQueue; (* OPAQUE *)

TYPE AstQueueT = AstQueue; (* for unqualified use *)


(* Operations  *)

PROCEDURE New ( VAR queue : AstQueue );
(* Allocates a new empty queue object and passes it back in queue.
   Passes NIL if the allocation failed. *)

PROCEDURE enqueue ( queue : AstQueue; node : AST ) : Queue;
(* Adds node to the head of queue and returns queue, or NIL on failure. *)

PROCEDURE enqueueUnique ( queue : AstQueue; node : AST ) : Queue;
(* Adds node to the head of queue if and only if the value is not already
 * present in queue.  Returns queue on success, or NIL on failure. *)

PROCEDURE dequeue ( queue : AstQueue ) : AST;
(* Removes the node at the tail of queue and returns it, or NIL on failure. *)

PROCEDURE isEmpty ( queue : AstQueue ) : BOOLEAN;
(* Returns TRUE if queue is empty, otherwise FALSE. *)

PROCEDURE isElem ( queue : AstQueue; node : AST ) : BOOLEAN;
(* Returns TRUE if node is stored in queue, otherwise FALSE. *)

PROCEDURE count ( queue : AstQueue ) : CARDINAL;
(* Returns the number of nodes in queue. *)

PROCEDURE Reset ( queue : AstQueue ) : AST;
(* Removes all nodes from queue but does not deallocate it.
   Returns queue on success, or NIL if queue is NIL. *)

PROCEDURE Release ( VAR queue : AstQueue );
(* Releases queue and passes back NIL if successful. *)


END AstQueue.
