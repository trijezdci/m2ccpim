(*!m2pim*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE TokenSet;

(* Token Set ADT for Modula-2 R10 Core Compiler *)

FROM Token IMPORT TokenT;


TYPE TokenSet; (* OPAQUE *)

TYPE TokenSetT = TokenSet; (* for unqualified use *)


(* Operations *)

PROCEDURE New
  ( VAR set : TokenSet; segment3, segment2, segment1, segment0 : LONGINT );
(* Passes a newly allocated and initialised TokenSet instance back in set.
   The set is initalised from parameters segment3 to segment0 as follows:
   
    bit 127                            bit 0
     v                                    v
    [<-----------------set---------------->]
    [segment3][segment2][segment1][segment0]
     ^         ^         ^         ^                
    bit 32    bit 32    bit 32    bit 32
    
    The bits in set correspond to the token values of type Token.
    If the bitwidth of type LONGINT is larger than 32, any higher bits are
    ignored.  The procedure passes back NIL if allocation is unsuccessful. *)

PROCEDURE Insert ( set : TokenSet; token : TokenT );
(* Inserts token into set. *)

PROCEDURE Remove ( set : TokenSet; token : TokenT );
(* Removes token from set. *)

PROCEDURE isEmpty ( set : TokenSet ) : BOOLEAN;
(* Returns TRUE if set is empty, otherwise FALSE. *)

PROCEDURE isElem ( set : TokenSet; token : TokenT ) : BOOLEAN;
(* Returns TRUE if token is an element of set, otherwise FALSE. *)

PROCEDURE count ( set : TokenSet ) : CARDINAL;
(* Returns the number of tokens in set. *)

PROCEDURE PrintTokenList ( set : TokenSet );
(* Prints a comma separated list of tokens in set. *)

PROCEDURE PrintSegments ( set : TokenSet );
(* Prints a comma separated list of the data segments of set in base-16. *)

PROCEDURE Release ( VAR set : TokenSet );
(* Releases set and passes back NIL if successful. *)


END TokenSet.
